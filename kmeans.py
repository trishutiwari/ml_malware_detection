#!/usr/bin/env python

from sklearn.cluster import KMeans
import numpy as np
from scapy.all import *
from datasketch.minhash import MinHash

def get_payload(pkt):
	while pkt.payload:
		pkt = pkt.payload
	return str(pkt)

def get_packet_seq_min_hash(packets,packet_range_begin,step):
	packet_seq_min_hash = MinHash()
	for packet_index in range(packet_range_begin,packet_range_begin+step):
		try:
			payload = get_payload(packets[packet_index])
		except IndexError:
			break
		packet_seq_min_hash.update(payload.encode('utf-8'))
	return packet_seq_min_hash.hashvalues

def get_pcap_min_hash(file,step):
	hash_array = list()
	packets = rdpcap(file)
	for packet_range_begin in range(0,len(packets),step):
		payload_min_hash = get_packet_seq_min_hash(packets,packet_range_begin,step)
		hash_array.append(payload_min_hash)
	return hash_array

def get_malware_hash(malware,range_max,step):
	X = list()
	for i in range(1,range_max):
		print( "[*] Status: malware:",malware,"pcap #:",i)
		file = "./data/{0}0{1}.pcap".format(malware,i)
		X.append(get_pcap_min_hash(file,step))
	print (np.concatenate(X).shape)
	return np.concatenate(X)

def k_means(X,num_clusters):
	kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(X)
	return kmeans.labels_
	
if __name__ == "__main__":
	step = 100
	malware_list = ['zeus','conficker','dridex']
	index_end_list = [8,2,3]
	X = list()
	data_length = list()
	for malware_name,index_end in zip(malware_list,index_end_list):
		data = get_malware_hash(malware_name,index_end,step)
		X.append(data)
		data_length.append(len(data))
	cluster_data = np.concatenate(X)
	labels = k_means(cluster_data,len(malware_list))
	index_start = 0
	for malware_name,length in zip(malware_list,data_length):
		print( malware_name,sum(labels[index_start:index_start+length])/float(length))
		index_start = index_start+length
	theData = np.array([])
	# I need all the lists to have the same number of elements: 
	count = 0 

	for x in X: 
		for y in x: 
			theData = np.append(theData, np.array(y))
	theLabels = np.array(labels) 
	np.save("Data", theData)
	np.save("Labels", theLabels) 
# X = np.array([[1, 2], [1, 4], [1, 0],[4, 2], [4, 4], [4, 0]])



