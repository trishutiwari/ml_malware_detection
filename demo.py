from kera.models import load_weights
import keras as keras
import time
import datetime
from keras.models import Sequential
from keras.layers import Dense
import numpy as np 
import nn
import sys

def get_formatted_data():
	print("############ FORMATTING THE DATA ############")
	malware_name_list = ['zeus','confickerdemo','dridexdemo','tridemo']
	end_index_list = [1,1,1,1]
	data, classes = nn.retrieve_datasets()
	return data, classes

def load_weights_predict(filename,evaluate_data,evaluate_classes):
	arrayDataLength =128
	numInputs = arrayDataLength 
	activation_func = "sigmoid"
	neuralNetModel = Sequential()
	neuralNetModel.add(Dense(3000, input_dim=numInputs, activation=activation_func))
	neuralNetModel.add(Dense(3, activation=activation_func)) 
	neuralNetModel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
	print("############ LOADING THE WEIGHTS FROM "+ filename+" #############")
	neuralNetModel.load_weights(filename)
	print("############ EVALUATING USING THE MODEL ############")
	evaluated_loss, evaluated_accuracy = neuralNetModel.evaluate(evaluate_data,evaluate_classes,arrayDataLength,verbose=1)
	print("LOSS: "+ evaluated_loss)
	print("ACCURACY: "+ evaluated_accuracy)
	

output = neuralNetModel.predict(data)
print(output)

if __name__ == "__main__":
	filename = sys.argv[0]
	print("THE GIVEN FILENAME IS: "+ filename)
	evaluate_data, evaluate_classes = get_formatted_data()
	load_weights_predict(filename,evaluate_data,evaluate_classes)
	

