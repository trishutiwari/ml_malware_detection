
import keras as keras
import time
import datetime
from keras.models import Sequential
from keras.layers import Dense
import numpy as np 
from nn import *
import sys

def get_formatted_data():
	print("############ FORMATTING THE DATA ############")
	malware_name_list = ['zeus','conflickerdemo','dridexdemo','tridemo']
	end_index_list = [2,2,2,2]
	data, classes = retrieve_datasets(malware_name_list,end_index_list)
	# print(data)
	return data, classes

def load_weights_predict(filename,evaluate_data,evaluate_classes):
	arrayDataLength = 133
	numInputs = arrayDataLength 
	activation_func = "sigmoid"
	neuralNetModel = Sequential()
	neuralNetModel.add(Dense(3000, input_dim=numInputs, activation=activation_func))
	neuralNetModel.add(Dense(3, activation=activation_func)) 
	neuralNetModel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
	print("############ LOADING THE WEIGHTS FROM "+ filename+" #############")
	neuralNetModel.load_weights(filename)
	print("############ EVALUATING USING THE MODEL ############")
	evaluated_loss, evaluated_accuracy = neuralNetModel.evaluate(evaluate_data,evaluate_classes,arrayDataLength,verbose=1)
	print("LOSS: "+ str(evaluated_loss))
	print("ACCURACY: "+ str(evaluated_accuracy))
	



if __name__ == "__main__":
	filename = "Weights_sigmoid_2017_12_03_11_30.h5"
	# print("THE GIVEN FILENAME IS: "+ filename)
	# evaluate_data, theClasses = get_formatted_data()
	# np.save("evaluateData",evaluate_data)
	# np.save("evaluateClasses", theClasses)
	# print(theClasses)
	evaluate_data = np.load("evaluateData.npy")
	theLabels = np.load("evaluateClasses.npy")
	theIndex = np.where(theLabels == 3)
	print(theIndex[0][0])
	classes = np.reshape(theLabels[:theIndex[0][0]], (len(theLabels[:theIndex[0][0]]), 1))
	evaluate_classes = keras.utils.to_categorical(classes, num_classes=3)
	evaluate_data = evaluate_data[:theIndex[0][0]]
	
	load_weights_predict(filename,evaluate_data,evaluate_classes)
	

